name: Build and publish image to DockerHub

on:
  push:
    branches:
      - master

env:
  IMAGE_NAME: sphinx

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release: ["slim-bookworm", "slim-bullseye", "slim-buster"]
        pyversion: ["3.11", "3.10", "3.9", "3.8", "3.7"]
    steps:
      -
        name: Check Out Repo
        uses: actions/checkout@v4
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            ${{ matrix.pyversion }}-${{ matrix.release }}
          flavor: |
            latest=${{ matrix.release == 'slim-bookworm' && matrix.pyversion == '3.11' }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm/v7,linux/arm64
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v5
        env:
          IMAGE_VERSION: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
        with:
          context: ./docker
          build-args: |
            PYVERSION=${{ matrix.pyversion }}
            RELEASE=${{ matrix.release }}
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/buildcache:${{ env.IMAGE_NAME }}-${{ env.IMAGE_VERSION }}
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/buildcache:${{ env.IMAGE_NAME }}-${{ env.IMAGE_VERSION }},mode=max
  remove-old-versions:
    needs: build
    runs-on: ubuntu-latest
    steps:
      -
        name: Delete old versions of images
        uses: vlaurin/action-ghcr-prune@main
        with:
          token: ${{ secrets.PAT }}
          user: ${{ github.repository_owner }}
          container: ${{ env.IMAGE_NAME }}
          untagged: true
